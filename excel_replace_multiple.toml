# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! WARNING, USE WITH CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# excel_replace_multiple gives you the capability to wreak havoc on your Excel files if you're not careful.
# Once excel_replace_multiple is run, it can't be undone. 
# If you make a mess, it's on you, exactly as if you had edited the files manually.
# It's recommended that you run excel_replace_multiple on copies of files. If everything is updated as intended,
# then the original files can be replaced with the modified files. 
# Be careful replacing cells that contain formulas - you may corrupt your files, so work with copies!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Purpose: 
#   This file (excel_replace_multiple.toml) contains settings for excel_replace_multiple.exe.
#     - It will not run without this file in the same directory as excel_replace_multiple.exe.
#     - Written in Go and uses Go regular expressions syntax to specifically modify Excel files (.xlsx/.xlsm) 
#       in the hierarchal folder/subfolder structure that contains excel_replace_multiple.exe. 
#       (e.g., if you put it in c:/ it'll search the entire c: drive).
#     - The Go package used to read/write Excel files (excelize) does not support .xlsb files (Excel binary files). 
#     - The Go package excelize interacts with Excel files without opening the Excel application - this greatly
#       improves performance compared to using VBA or the xlwings Python package.
#     - The cell values are updated, not underlying formulas. If target cell has a formula, the value will likely 
#       be out of sync with the formula when the file is opened with the Excel application.
#
# Author/date:
#   Bill Thaman (bill.thaman@hdrinc.com) 2/20/2021
#
#
#
#
###########################################################################
########################### START TOML SETTINGS ###########################
###########################################################################
title = "Settings for excel_replace_multiple"

# [search] table contains regular expressions used to filter which 
# Excel workbooks, which worksheets within those workbooks, and which
# cells within those sheets, that will be updated.
#
[search]
wb_regex = "^ESSA_TOMAHAWK_v4.2_23_30_13.xlsm$"
sheet_regex = "^ESS_\\d+"
cell_regex = "^E10$"
searchreplace_regex = [
    ["Engineered Air", "Engineered Air, Inc."]
]
value_if_blank = "0"
###########################################################################
############################ END TOML SETTINGS ############################
###########################################################################
#
#
#
#
# TOML VARIABLES:
#   wb_regex:            pattern to match workbooks to be updated
#   sheet_regex:         pattern to match sheets to be updated
#   cell_regex:          pattern to match cells to be updated
#   searchreplace_regex: contains one or more patterns and replacement strings to apply to cell values. Replacements are done
#                        in succession on the original value. To my knowledge there is no practical limit to the total number.
#                        Structure is 2-d array of size nx2 where n is the number of regex/replacement_string pairs.
#                        e.g., to represent two regex expressions and two corresponding replacement strings:
#                        [["regex_1", "replacement_string_1], ["regex_2", "replacement_string_2"]]
#                        where regex_# = pattern to match, and replacement_string_# = string that replaces pattern
#
# NOTES:
#   <1>  wb_regex should resolve to a valid .xlsx/.xlsm Excel file (e.g., don't use ".*"). 
#        If not, an error will be thrown when a non-Excel file, or .xlsb file, is encountered.
#   <2>  Be as specific with wb_regex, sheet_regex, cell_regex, and searchreplace_regex as possible. 
#        Don't modify what you don't need to, and modify cell values generated by formulas with 
#        caution (the formula is there for a reason). Unexpected results or file corruption could occur.
#   <3>  In toml syntax, a backslash (\) in a regex must be escaped with another backslash 
#        (e.g., "\\s+" represents one or more whitespace characters)
#   <4>  Each cell value is trimmed of leading/trailing spaces before the regex is applied.
#   <5>  Use "$" for matching groups. e.g., "$1" for first group
#   <6>  Use Go regexp package syntax: https://golang.org/pkg/regexp/syntax/ 
#        NOTE: Go regexp does not support some features common in other language's regexp implementation,
#        e.g., lookahead/lookbehind assertions.
#
# COMMON EXAMPLES:
#   - Trimming leading/trailing spaces (1st expression) and removing extra spaces (2nd expression):
#       searchreplace_regex = [
#           ["(^\\s+|\\s+$)", ""],
#           ["\\s+", " "]
#       ]
#       # NOTE: Can also use ["(.*)", "$1"] to replace leading/trailing spaces, but this is less obvious how it works
#
# OTHER EXAMPLES:
#   ".*"                      match any character (.) any number of times (*)
#   ".*\\.xls(x|m)$"          any file with .xlsx, .xlsm, or .xlsb extension
#   ".*ESSA_.*\\.xlsm$"       file name has "ESSA" in the root, with a "xlsm" extension
#   "^ESS_\\d+"               sheet name starts with "ESS_" and is followed by a number (e.g., "ESSA_19")
#   "\\s*\\|+\\s*"            strip adjacent white space from vertical bar "|". Use replace_string="|" (e.g., for ESSA Attributes sheet)
#   "[^\\d\\.]"               everything that is NOT a number or a decimal point. replace with "". Used to strip text from numbers.
#   "G([123]?[0-9]$|[4][0]$)" if for cell_regex, matches rows G1-G40
#   "E([2][9]$|[3-9][0-9]$|[1][0-6][0-9]$|[1][7][0-3]$)" if for cell_regex, rows E29-E173
#   "(^[G-Z]\\d+|[A-D][A-Z]\\d+|[E][A-U]\\d+)" if for cell_regex, columns G-EU
#   "A\\d*[13579]             if for cell_regex, matches odd cells in column "A"
#   "^6{1}"                   match a single number 6. Using "6" sometimes does not result in a match in an Excel value (not sure why).
#   ["((?:City|Village|Town) of)\\s+(.*)", "$2, $1"] e.g., replace "City of Houston" w/ "Houston, City of"
#   ["(.*\\s?.*)\\s+(.*)", "$2, $1"] e.g., replace "Al Pacino" w/ "Pacino, Al" or "Warren G. Harding" w/ "Harding, Warren G."
